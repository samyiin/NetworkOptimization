When explaining the choices we made in this project, we need to consider the following aspects:
1. Iteration count: Too few? Too high? Convergence detection?
No need too much, enough to converge.

2. Warmup rounds: What to consider?
No need too much, enough to converge.

3. Exclusivity: Make sure that our server only listens to our client, not other clients.
This can simply be solved by exchange information before we start.

Find the best combo for the results. (Consider each message size, different distribution of message size might require
different set of parameters.)

How many times of copy? See group

Added: max_inline? Get it from QP, and then if message size < max_inline, we will send it by in line

need to look into what is a channel in ibv_create_comp_channel, and it's something relates to Host Channel Adapter.
And also, I understand what is a QP, but in which physical existence is it?
Also the "use_event" in completion queue

Need to look at what is service level (sl)

Also, for multi client, maybe worth check out protection domain

look into port_info

major change:
1. separate cq to send cq and receive cq
2. one send mr, but multiple receive mr: in case multiple messages don't override each other ?!
3. post receive fill just look for unposted receive mr and post them
4. Now we can wait completion of send wc and receive rc separately

A bit of hazard:
1. rend control message is opcode (an enum) + buff (4kb) so it's a bit bigger than 4kb
2. in kv_set, key's len is <= 4kb, but I also add the value size in the buffer, so key's len <= 4kb - sizeof(size_t)
3. in _handle client_kv_get, if the value size is < 4kb, I will send through EAGER, that means there are some marginal
cases when key + value > 4kb (so kv set is rendezvous), but value < 4kb (so kv_get is eager). But I think this design
makes sense

kv_set: EAGER: Check if the value size is indeed less (Trust client?)
kv_get: trust server? for sure!

when rdma write succeed, it will not use receive wc, but when it failed (usually when rkey is wrong) , the server's receive wc will recieve a
incomplete wc, need to handle such situation.

in dynamic array, insert array, if the key exists, then we will just update the value, and not update the key, and we will free the key of new entry.
But if the key of new entry and the key of original entry is the same key, (they are pointing to the same address,

start modifying qp, what is qpn? how to ensure exclusivity? what about protection domain?

separate the two parts of set: EAGER and RENDEZVOUS both have only two parts, so we can do it like this.

We don't need multiple memory region because we will create different cq for each client? No we don't......